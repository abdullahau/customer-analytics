return(ans)
}
Fa <- function(m, mp, c, alpha, r, pina, b1, b2, b3){
ans <- (1 - pina) * (1 - (alpha / (alpha + B(m, mp, c, b1, b2, b3)))^r)
return(ans)
}
mega <- function(cA, alphaA, rA, pina, cR, alphaR, rR, b1A, b2A, b3A, b1R, b2R, b3R){
L <- rep(0, Ms)
M <- rep(0, Ms)
A <- rep(0, Ms)
C <- matrix(NA,Ms,Ms)
L[1] <- 0
M[1] <- POP[1]
C[1,1] <- 1
A[1] <- 1
for(m in 2:Ms){
#solve for M(L_{t-1}):
M[m] <- POP[m] - POP[m-1] + L[m-1]
#solve for A(M)
for(i in 1:(m-1)){
A[m] <- A[m] + M[i] * (Fa(i, m, cA, alphaA, rA, pina, b1A, b2A, b3A) - Fa(i, m-1, cA, alphaA, rA, pina, b1A, b2A, b3A))
}
#solve for C(A,m)
for(i in 1:m){
if(i < m){
C[i,m] <- A[i] * Sr(i, m, cR, alphaR, rR, b1R, b2R, b3R)
}else if(i==m){
C[i,m] <- A[i]
}
}
#solve for L(C)
L[m] <- sum(C[c(1:(m-1)),(m-1)]) - sum(C[c(1:m),m]) + C[m,m]
}
results <- list("M" = M,"A" = A,"C" = C, "L" = L)
return(results)
}
SSE <- function(params){
ans <- 0
cA <- params[1]
alphaA <- params[2]
rA <- params[3]
pina <- params[4]
cR <- params[5]
alphaR <- params[6]
rR <- params[7]
b1A <- params[8]
b2A <- params[9]
b3A <- params[10]
b1R <- params[11]
b2R <- params[12]
b3R <- params[13]
megane <- mega(cA, alphaA, rA, pina, cR, alphaR, rR, b1A, b2A, b3A, b1R, b2R, b3R)
if(q_b == 1){
for(q in 1:Qs){
ADDhat <-  megane$A[3*q - 2] + megane$A[3*q - 1] + megane$A[3*q]
LOSShat <- megane$L[3*q - 2] + megane$L[3*q - 1] + megane$L[3*q]
ENDhat <- sum(megane$C[1:(3*q),3*q])
ans <- ans + (ADD[q] - ADDhat)^2 + (LOSS[q] - LOSShat)^2
}
}else if(q_b > 1){
for(q in 5:Qs){
ADDhat <-  megane$A[3*q - 2] + megane$A[3*q - 1] + megane$A[3*q]
LOSShat <- megane$L[3*q - 2] + megane$L[3*q - 1] + megane$L[3*q]
ENDhat <- sum(megane$C[1:(3*q),3*q])
ans <- ans + (ADD[q] - ADDhat)^2 + (LOSS[q] - LOSShat)^2
}
}
ans <- ans + (END[q] - ENDhat)^2
return(ans)
}
SSE(params=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
#mega(1,1,1,0.5,1,1,1,1,1,1,1,1,1)
#mega(1,1,1,0,1,1,1,1,1,1,1,1,1)$M
x <- nlm(f = SSE, p=c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5))
rm(list = ls()) # clear cache
options(scipen = 999)
setwd("/home/ravshan/Dropbox/project/valuation/")
# input data
df <- read.csv("data/data.csv") #marketing costs
P <- read.csv("data/population.csv")
cpc <- read.csv("data/cpc.csv")$cpc[1] #customer acquisition cost
# public data for model
ADD <- df$marketing/cpc #quarterly customer acquisition number
LOSS <- df$customers - ADD #quarterly customer loss number
END <- df$customers #end of quarter customer number
REV <- END*df$revpc #quarterly revenue data
POP <- P$population #monthly pop data
# automated calculations
Qs <- nrow(df) #number of quarters
Ms <- Qs * 3
q_a <- 0 #data quarter
q_b <- Qs - nrow(na.omit(df)) + 1 #data starting quarter
#quarter dummies
num <- ceiling(Ms/9)
q1 <- rep(c(rep(1,3), rep(0,6), rep(0,3)), num)[1:Ms]
q2 <- rep(c(rep(0,3), rep(1,3), rep(0,6)), num)[1:Ms]
q3 <- rep(c(rep(0,6), rep(1,3), rep(0,3)), num)[1:Ms]
B <- function(m, mp, c, b1, b2, b3){
ans <- 0
if(mp > m){
for(i in (m+1):mp){
left <- (i-m)^c - (i-m-1)^c
right <- b1 * q1[i] + b2 * q2[i] + b3 * q3[i]
ans <- ans + left * exp(right)
}
}
return(ans)
}
Sr <- function(m, mp, c, alpha, r, b1, b2, b3){
ans <- (alpha / (alpha + B(m, mp, c, b1, b2, b3))) ^ r
return(ans)
}
Fa <- function(m, mp, c, alpha, r, pina, b1, b2, b3){
ans <- (1 - pina) * (1 - (alpha / (alpha + B(m, mp, c, b1, b2, b3)))^r)
return(ans)
}
mega <- function(cA, alphaA, rA, pina, cR, alphaR, rR, b1A, b2A, b3A, b1R, b2R, b3R){
L <- rep(0, Ms)
M <- rep(0, Ms)
A <- rep(0, Ms)
C <- matrix(NA,Ms,Ms)
L[1] <- 0
M[1] <- POP[1]
C[1,1] <- 1
A[1] <- 1
for(m in 2:Ms){
#solve for M(L_{t-1}):
M[m] <- POP[m] - POP[m-1] + L[m-1]
#solve for A(M)
for(i in 1:(m-1)){
A[m] <- A[m] + M[i] * (Fa(i, m, cA, alphaA, rA, pina, b1A, b2A, b3A) - Fa(i, m-1, cA, alphaA, rA, pina, b1A, b2A, b3A))
}
#solve for C(A,m)
for(i in 1:m){
if(i < m){
C[i,m] <- A[i] * Sr(i, m, cR, alphaR, rR, b1R, b2R, b3R)
}else if(i==m){
C[i,m] <- A[i]
}
}
#solve for L(C)
L[m] <- sum(C[c(1:(m-1)),(m-1)]) - sum(C[c(1:m),m]) + C[m,m]
}
results <- list("M" = M,"A" = A,"C" = C, "L" = L)
return(results)
}
SSE <- function(params){
ans <- 0
cA <- params[1]
alphaA <- params[2]
rA <- params[3]
pina <- params[4]
cR <- params[5]
alphaR <- params[6]
rR <- params[7]
b1A <- params[8]
b2A <- params[9]
b3A <- params[10]
b1R <- params[11]
b2R <- params[12]
b3R <- params[13]
megane <- mega(cA, alphaA, rA, pina, cR, alphaR, rR, b1A, b2A, b3A, b1R, b2R, b3R)
if(q_b == 1){
for(q in 1:Qs){
ADDhat <-  megane$A[3*q - 2] + megane$A[3*q - 1] + megane$A[3*q]
LOSShat <- megane$L[3*q - 2] + megane$L[3*q - 1] + megane$L[3*q]
ENDhat <- sum(megane$C[1:(3*q),3*q])
ans <- ans + (ADD[q] - ADDhat)^2 + (LOSS[q] - LOSShat)^2
}
}else if(q_b > 1){
for(q in 5:Qs){
ADDhat <-  megane$A[3*q - 2] + megane$A[3*q - 1] + megane$A[3*q]
LOSShat <- megane$L[3*q - 2] + megane$L[3*q - 1] + megane$L[3*q]
ENDhat <- sum(megane$C[1:(3*q),3*q])
ans <- ans + (ADD[q] - ADDhat)^2 + (LOSS[q] - LOSShat)^2
}
}
ans <- ans + (END[q] - ENDhat)^2
return(ans)
}
#SSE(params=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
mega(1,1,1,0.5,1,1,1,1,1,1,1,1,1)
#mega(1,1,1,0,1,1,1,1,1,1,1,1,1)$M
#x <- nlm(f = SSE, p=c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5))
# rm(list=ls())
# testfnc <- function(params){
#   x <- params[1]
#   y <- params[2]
#   return(x^2+y^2)
# }
# a <- nlm(testfnc, c(10,100))
SSE(params=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
rm(list = ls()) # clear cache
options(scipen = 999)
setwd("/home/ravshan/Dropbox/project/valuation/")
# input data
df <- read.csv("data/data.csv") #marketing costs
P <- read.csv("data/population.csv")
cpc <- read.csv("data/cpc.csv")$cpc[1] #customer acquisition cost
# public data for model
ADD <- df$marketing/cpc #quarterly customer acquisition number
LOSS <- df$customers - ADD #quarterly customer loss number
END <- df$customers #end of quarter customer number
REV <- END*df$revpc #quarterly revenue data
POP <- P$population #monthly pop data
# automated calculations
Qs <- nrow(df) #number of quarters
Ms <- Qs * 3
q_a <- 0 #data quarter
q_b <- Qs - nrow(na.omit(df)) + 1 #data starting quarter
#quarter dummies
num <- ceiling(Ms/9)
q1 <- rep(c(rep(1,3), rep(0,6), rep(0,3)), num)[1:Ms]
q2 <- rep(c(rep(0,3), rep(1,3), rep(0,6)), num)[1:Ms]
q3 <- rep(c(rep(0,6), rep(1,3), rep(0,3)), num)[1:Ms]
B <- function(m, mp, c, b1, b2, b3){
ans <- 0
if(mp > m){
for(i in (m+1):mp){
left <- (i-m)^c - (i-m-1)^c
right <- b1 * q1[i] + b2 * q2[i] + b3 * q3[i]
ans <- ans + left * exp(right)
}
}
return(ans)
}
Sr <- function(m, mp, c, alpha, r, b1, b2, b3){
ans <- (alpha / (alpha + B(m, mp, c, b1, b2, b3))) ^ r
return(ans)
}
Fa <- function(m, mp, c, alpha, r, pina, b1, b2, b3){
ans <- (1 - pina) * (1 - (alpha / (alpha + B(m, mp, c, b1, b2, b3)))^r)
return(ans)
}
mega <- function(cA, alphaA, rA, pina, cR, alphaR, rR, b1A, b2A, b3A, b1R, b2R, b3R){
L <- rep(0, Ms)
M <- rep(0, Ms)
A <- rep(0, Ms)
C <- matrix(NA,Ms,Ms)
L[1] <- 0
M[1] <- POP[1]
C[1,1] <- 1
A[1] <- 1
for(m in 2:Ms){
#solve for M(L_{t-1}):
M[m] <- POP[m] - POP[m-1] + L[m-1]
#solve for A(M)
for(i in 1:(m-1)){
A[m] <- A[m] + M[i] * (Fa(i, m, cA, alphaA, rA, pina, b1A, b2A, b3A) - Fa(i, m-1, cA, alphaA, rA, pina, b1A, b2A, b3A))
}
#solve for C(A,m)
for(i in 1:m){
if(i < m){
C[i,m] <- A[i] * Sr(i, m, cR, alphaR, rR, b1R, b2R, b3R)
}else if(i==m){
C[i,m] <- A[i]
}
}
#solve for L(C)
L[m] <- sum(C[c(1:(m-1)),(m-1)]) - sum(C[c(1:m),m]) + C[m,m]
}
results <- list("M" = M,"A" = A,"C" = C, "L" = L)
return(results)
}
SSE <- function(params){
ans <- 0
cA <- params[1]
alphaA <- params[2]
rA <- params[3]
pina <- params[4]
cR <- params[5]
alphaR <- params[6]
rR <- params[7]
b1A <- params[8]
b2A <- params[9]
b3A <- params[10]
b1R <- params[11]
b2R <- params[12]
b3R <- params[13]
megane <- mega(cA, alphaA, rA, pina, cR, alphaR, rR, b1A, b2A, b3A, b1R, b2R, b3R)
if(q_b == 1){
for(q in 1:Qs){
ADDhat <-  megane$A[3*q - 2] + megane$A[3*q - 1] + megane$A[3*q]
LOSShat <- megane$L[3*q - 2] + megane$L[3*q - 1] + megane$L[3*q]
ENDhat <- sum(megane$C[1:(3*q),3*q])
ans <- ans + (ADD[q] - ADDhat)^2 + (LOSS[q] - LOSShat)^2
}
}else if(q_b > 1){
for(q in 5:Qs){
ADDhat <-  megane$A[3*q - 2] + megane$A[3*q - 1] + megane$A[3*q]
LOSShat <- megane$L[3*q - 2] + megane$L[3*q - 1] + megane$L[3*q]
ENDhat <- sum(megane$C[1:(3*q),3*q])
ans <- ans + (ADD[q] - ADDhat)^2 + (LOSS[q] - LOSShat)^2
}
}
ans <- ans + (END[q] - ENDhat)^2
return(ans)
}
SSE(params=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
#mega(1,1,1,0.5,1,1,1,1,1,1,1,1,1)
#mega(1,1,1,0,1,1,1,1,1,1,1,1,1)$M
#x <- nlm(f = SSE, p=c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5))
# rm(list=ls())
# testfnc <- function(params){
#   x <- params[1]
#   y <- params[2]
#   return(x^2+y^2)
# }
# a <- nlm(testfnc, c(10,100))
SSE(params=c(1,1,1,0.5,1,1,1,1,1,1,1,1,1))
SSE(params=c(1,1,1,0.3,1,1,1,1,1,1,1,1,1))
SSE(params=c(1,1,1,0.2,1,1,1,1,1,1,1,1,1))
SSE(params=c(1,1,1,0.02,1,1,1,1,1,1,1,1,1))
SSE(params=c(1,1,2,0.02,1,1,1,1,1,1,1,1,1))
SSE(params=c(1,4,2,0.02,1,1,1,1,1,1,1,1,1))
x <- nlm(f = SSE, p=c(0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5))
#mega(1,1,1,0,1,1,1,1,1,1,1,1,1)$M
x <- nlm(f = SSE, p=c(1,4,2,0.02,1,1,1,1,1,1,1,1,1))
warnings()
SSE(params=c(1,4,2,0.02,1,1,1,1,1,1,1,1,1))
SSE(params=c(1,4,2,0.02,1,1,1,1,1,1,2,1,1))
SSE(params=c(1,4,2,0.02,1,1,1,1,1,1,2,1,21))
SSE(params=c(1,4,6,0.02,1,1,1,1,1,1,2,1,21))
#mega(1,1,1,0.5,1,1,1,1,1,1,1,1,1)
nlm(SSE, c(0))
nlm(SSE, c(1)
nlm(SSE, c(1))
nlm(SSE, c(0))
nlm(SSE, c(1,1))
nlm(SSE, c(1,1,1))
nlm(SSE, c(1,1,1,0))
nlm(SSE, c(1,1,1,0,1,1,1,1,1,1,1,1))
nlm(SSE, c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(SSE
nlm(SSE)
nlm(f=SSE)
nlm(f=SSE, p=c(0,0,0,0,0,0,0,0,0,0,0,0,0))
nlm(f=SSE, p=c(0,0,0,0,0,0,0,0,0,0,0,0,0))
mega(0,0,0,0,0,0,0,0,0,0,0,0,0)
nlm(f=SSE, p=c(0,0,0,0,0,0,0,0,0,0,0,0,0))
SSE(0,0,0,0,0,0,0,0,0,0,0,0,0)
SSE(c(0,0,0,0,0,0,0,0,0,0,0,0,0))
SSE(c(0,0,0,0,0,0,0,0,0,0,0,0,0))
SSE(c(0,0,0,0,0,0,0,0,0,0,0,0,12))
SSE(c(0,0,0,0,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,0,0,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,0,0.1,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,232,0.1,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,23,0.1,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,2,0.1,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,0.12,0.1,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,0,0.1,0,0,0,0,0,0,0,12,12))
SSE(c(12,0,1,0.1,0,0,0,0,0,0,0,12,12))
SSE(c(1,0,1,0.1,1,0,0,0,0,0,0,12,12))
SSE(c(1,0,1,0.1,1,0,0,0,0,0,0,12,2))
SSE(c(1,0,1,0.1,1,0,0,0,0,0,0,1,1))
SSE(c(1,0,1,1,1,0,0,0,0,0,0,1,1))
SSE(c(1,0,1,1,0,0,0,0,0,0,1,1))
SSE(c(1,0,1,0.2,0,0,0,0,0,0,1,1))
SSE(c(0,0,0,0,0,0,0,0,0,0,0,0,0))
SSE(c(0,0,0,0.3,0,0,0,0,0,0,0,0,0))
SSE(c(0,0,0,1,0,0,0,0,0,0,0,0,0))
SSE(c(1,1,1,1,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.12,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.14,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.5,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.9,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.0001,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.00001,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(SSE, c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 1000000000000000)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 1000000000000)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 1000000000000)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 1000000000)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 10000000)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 100000)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 10)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 9)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 1)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 2)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 8)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 6)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 7)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 6)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 5)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 3)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1), gradtol = 1)
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
q1
q2
C
C
megane
mega
q_b
SSE(c(2,1000,11,0.5,1,80,1,0,0,0,0,0,0))
x <- nlm(f = SSE, p=c(2,1000,11,0.5,1,80,1,0,0,0,0,0,0))
warnings()
SSE(c(2,1000,11,0.5,1,80,1,0,0,0,0,0,0))
SSE(c(2,1000,11,0.5,1,80,1,0,0,0,0,0,1))
SSE(c(2,1000,11,0.5,1,80,1,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,80,1,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,100,1,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,1,1,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,1,100,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,1,1000,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,1,100000,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,1,100,0,0,0,0,0,0))
SSE(c(2,100,11,0.5,1,1,90,0,0,0,0,0,0))
SSE(c(2,10,11,0.5,1,1,90,0,0,0,0,0,0))
SSE(c(2,1000,11,0.5,1,1,90,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,90,0,0,0,0,0,0))
SSE(c(2,100000,11,0.5,1,1,90,0,0,0,0,0,0))
SSE(c(2,20000,11,0.5,1,1,90,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,90,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,10,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,100,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,1000,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,2000,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,230,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,1,10,0,0,0,0,0,0))
SSE(c(2,10000,11,0.5,1,12,230,0,0,0,0,0,0))
SSE(c(2,10000,11,0.2,1,12,230,0,0,0,0,0,0))
SSE(c(2,10000,11,0.1,1,12,230,0,0,0,0,0,0))
SSE(c(2,10000,11,0,1,12,230,0,0,0,0,0,0))
SSE(c(2,10000,11,0.1,1,12,230,0,0,0,0,0,0))
SSE(c(2,10000,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(2,10000,11,0.1,22,12,20,0,0,0,0,0,0))
SSE(c(2,10000,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(200,10000,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(0,10000,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,10000,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,1000,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,100,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,10,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,200,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,300,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,11,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,13,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,23,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,200,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,100,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,90,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,50,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,60,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,60,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,12,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,122,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,12122,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,1222,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,0.12,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,0.4,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,0.7,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,1.7,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,1,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,3,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,0,0,0,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,1,0,0,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,12,0,0,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,1212,0,0,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,0,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,1,0,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,1,1,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,11,11,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,111,111,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,0,0,0))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,0,0,12))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,0,0,111))
SSE(c(20,90,30,0.1,2,12,20,1,1,1,0,0,11))
x <- nlm(f = SSE, p=c(20,90,30,0.1,2,12,20,1,1,1,0,0,11))
x <- nlm(f = SSE, p=c(20,90,30,0.1,2,12,20,1,1,1,0,0,11))
x <- nlm(f = SSE, p=c(1,9,3,0.1,2,1,1,1,1,1,0,0,11))
warnings()
x <- nlm(f = SSE, p=c(1,1,3,0.1,2,1,1,1,1,1,0,0,11))
x <- nlm(f = SSE, p=c(1,1,3,0.1,2,1,1,1,1,1,0,0,1))
SSE(c(1,1,3,0.1,2,1,1,1,1,1,0,0,1))
SSE(c(1,1,1,0,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,1,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0,1,1,1,1,1,1,1,1,1))
x <- nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
x <- nlm(f = SSE, p=c(1,4,2,0.02,1,1,1,1,1,1,1,1,1))
SSE(c(1,4,2,0.02,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0.02,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,0,1,1,1,1,1,1,1,1,1))
x <- nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(f=SSE, p=c(1,1,1,0,1,1,1,1,1,1,1,1,1))
nlm(f=SSE, p=c(0.8499300,0.9540082,0.9527125,-0.2165089,1.5782809,1.0717186,0.7639331,1.0169236,0.6285786,1.0662537,-0.7374605, 0.1265273,-0.3348449))
SSE(c(0.8499300,0.9540082,0.9527125,-0.2165089,1.5782809,1.0717186,0.7639331,1.0169236,0.6285786,1.0662537,-0.7374605, 0.1265273,-0.3348449))
SSE(c(1,1,1,0,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,-0.1,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,-0.0,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,-0.9,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,-0.2,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,-0.7,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,-0.2,1,1,1,1,1,1,1,1,1))
SSE(c(1,1,1,-0.1,1,1,1,1,1,1,1,1,1))
nlmP
install.packages(nlmP)
install.packages(geoR)
install.packages("geoR")
library("geoR")
nlmP
nlmP()
nlmP
